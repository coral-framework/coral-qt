import co.NotSupportedException;
import co.IllegalArgumentException;

/*!
	Exposes system-wide Qt operations.
 */
interface ISystem
{
	// The 'qApp' object.
	readonly Object app;

	/*! 
		Loads a QWidget from a .ui file created in Qt Designer.
		If \a parent is not NULL, it will be set as the parent of the returned
		widget.

		\throw qt.Exception if the ui file could not be loaded.
		\throw co.IllegalArgumentException if \a parent is not a subclass of
		 QWidget.		
	 */
	
	void loadUi( in string filePath, in Object parent, out Object widget ) 
		raises Exception, IllegalArgumentException;

	// Sets or replaces Qt's search paths for file names with the prefix 
	// 'prefix' to 'searchPaths'. \see Qt's documentation of QDir::setSearchPaths().
	void setSearchPaths( in string prefix, in string[] searchPaths );

	// Opens a directory selection dialog and returns the selected directory or
	// an empty string if no directory was selected.
	void getExistingDirectory( in Object parent, in string caption, in string initialDir, out string selectedDir );

	// Opens a file selection dialog and returns the selected files or an empty
	// list if no file was selected
	void getOpenFileNames( in Object parent, in string caption, in string initialDir, in string filter, out string[] selectedFiles );
	
	// Opens a file saving dialog and returns the fileName
	void getSaveFileName( in Object parent, in string caption, in string initialDir, in string filter, out string selectedFile );

	/*! 
		Creates a new object using the class specified by className. This 
		function supports creation of any widget class listed in 
		QUILoader::availableWidgets() method plus QActions, any QLayout 
		subclass (i.e QStackedLayout) and QMessageBox classes.

		\throw co.NotSupportedException if className is not supported.
	 */
	void newInstanceOf( in string className, in Object parent, out Object object ) 
		raises NotSupportedException;

	/*! 
		Inserts a widget in the given \a parent before widget with index 
		\a beforeIndex. Parameter \a parent must be an instance of 
		QStatusBar, QBoxLayout, QStackedLayout or QSplitter. If \a beforeIndex
		is -1, then the \a widget is appended after last widget in \a parent 
		widget list.

		\throw co.IllegalArgumentException if the \a parent is not an instance
		of QStatusBar, QBoxLayout, QStackedLayout nor QSplitter class.
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
	 */
	void insertWidget( in Object parent, in int32 beforeIndex, in Object widget ) 
		raises IllegalArgumentException;

	/*! 
		Removes \a widget from \a parent.
	
		\throw co.IllegalArgumentException if the \a parent is not an instance
		of QStatusBar, QBoxLayout nor QStackedLayout class.
		Note: altough it is possible to insert a widget into a QSplitter (\see,
		insertWidget()), Qt	does not allow removal of widgets from splitters,
		so an exception will be raised if a QSplitter is passed as argument to
		\a widget.

		This function also sets the parent widget of \a widget to NULL.

		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
	 */
	void removeWidget( in Object parent, in Object widget )
		raises IllegalArgumentException;

	/*! 
		Sets the centralWidget of given \a mainWindow instance.
	
		\throw co.IllegalArgumentException if \a mainWindow is not an instance
		of QMainWindow.
	 */
	void setCentralWidget( in Object mainWindow, in Object widget ) 
		raises IllegalArgumentException;
		
	/*! 
		Adds \a dockWidget into dock widget area of \a mainWindow.
	
		\throw co.IllegalArgumentException if the \a mainWindow is not an instance
		of QMainWindow or \a dockWidget is not an instance of QDockWidget.
	 */
	void addDockWidget( in Object mainWindow, in int32 dockArea, in Object dockWidget )
		raises IllegalArgumentException;

	/*!
		Sets the given dock widget area to occupy the specified corner of the \a mainWindow.
	
		\throw co.IllegalArgumentException if the \a mainWindow is not an instance
		of QMainWindow.
	 */
	void setCorner( in Object mainWindow,  in int32 corner, in int32 dockArea )	
		raises IllegalArgumentException;

	/*! 
		Sets \a widget into \a dockWidget.
	
		\throw co.IllegalArgumentException if the \a dockWidget is not an instance
		of QDockWidget or \a widget is not an instance of QWidget.
	 */
	void setWidget( in Object dockWidget, in Object widget );

	/*! 
		Sets a layout in the given widget.
		
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
		\throw co.IllegalArgumentException if the \a layout is not an instance
		of QLayout class.
	 */
	void setLayout( in Object widget, in Object layout ) raises IllegalArgumentException;

	/*! 
		Gets the layout from the given widget.
		
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
	 */
	void getLayout( in Object widget, out Object layout ) raises IllegalArgumentException;

	/*! 
		Adds an action into an action group.

		\throw co.IllegalArgumentException if the \a actionGroup is not instance of
		QActionGroup or \a action is not an instance of QAction.
	 */
	void addActionIntoGroup( in Object actionGroup, in Object action ) 
		raises IllegalArgumentException;
	
	/*! 
		Inserts an action to the given widget before \a beforeAction action.
		If \a beforeActionIndex is -1 the action is appended after the last
		action in widgets list.

		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget or \a action is not an instance of QAction.
		\throw qt.Exception if the \a action or beforeActionIndex is 
		out-of-bounds.
	 */
	void insertAction( in Object widget, in int32 beforeActionIndex, in Object action ) 
		raises IllegalArgumentException, Exception;

	/*! 
		Removes \a action from \a widget.
		
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget or \a action is not an instance of QAction.
		\throw qt.Exception if the \a action or beforeActionIndex is 
		out-of-bounds.
	 */
	void removeAction( in Object widget, in Object action ) 
		raises IllegalArgumentException, Exception;	

	/*! Sets the given \a action as separator. \see QAction:setSeparator().

		\throw co.IllegalArgumentException if the \a action is not an instance
		of QAction class.
	 */
	void makeSeparator( in Object action ) raises IllegalArgumentException;

	/*! Sets the a menu in the given \a action. It allows creation of submenus
		or menus in QMenuBars.

		\throw co.IllegalArgumentException if the \a action is not an instance
		of QAction class.

		\throw co.IllegalArgumentException if the \a menu is not an instance
		of QMenu class.
	 */
	void setMenu( in Object action, in Object menu ) raises IllegalArgumentException;

	/*! 
		Performs exec() calls to QMenu instances (\see QMenu::exec()).
		The exec() call is performed at position (posX, posY). If posX or posY is
		invalid (i.e -1) the exec() call is performed at current cursor position.

		Returns the triggered action or a null object if no action was triggered.

		\throw co.IllegalArgumentException if the given menu instance is not an
		instance of QMenu class.
	 */
	void execMenu( in Object menu, in int32 posX, in int32 posY, out Object selectedAction )
		raises IllegalArgumentException;

	/*! 
		Inserts an new item to the given \a comboBox before at specified \a index.
		If \a index is -1 the item is appended after the last item in list.

		\throw co.IllegalArgumentException if the \a comboBox is not instance of
		QComboBox.
		\throw qt.Exception if the \a index is out-of-bounds.
	 */
	void insertItem( in Object comboBox, in int32 index, in string text, in any userData );

	//! Shows comboBox popup list.
	void showPopup( in Object comboBox );

	//! Hides comboBox popup list.
	void hidePopup( in Object comboBox );

	/*!
		Sets the mouse cursor shape for the given widget.
		The cursor shape is given by the value of \a cursor, who is assumed to be
		a value in the Qt::CursorShape enumeration.
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	 */
	void setCursor( in Object widget, in int32 cursor ) raises IllegalArgumentException;

	/*!
		Removes the custom mouse cursor shape for the given widget, restoring the system default cursor.
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	 */
	void unsetCursor( in Object widget ) raises IllegalArgumentException;

	/*!
		Sets the given widget's cursor position.
		The mouse cursor is warped to the global screen position (posX, posY).
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	 */
	void setCursorPosition( in Object widget, in int32 posX, in int32 posY );

	/*!
		Gets the given widget's cursor position.
		
		Returns the global screen coordinates (posX, posY) of the mouse cursor.
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	 */
	void getCursorPosition( in Object widget, out int32 posX, out int32 posY );
	
	/*!
		Translates the global screen coordinates into the given widget's local coordinates.
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	*/
	void mapFromGlobal( in Object widget, inout int32 posX, inout int32 posY );

	/*!
		Translates the given widget's local coordinates into screen's global coordinates.
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	*/
	void mapToGlobal( in Object widget, inout int32 posX, inout int32 posY );

	/*! 
		Sets the given IAbstractItemModel as the model for the given view instance.

		\throw co.IllegalArgumentException if the given \a view instance is not an
		instance of QAbstractItemView class or \a model is not an instance of
		QAbstractItemModel class.
	 */
	void assignModelToView( inout Object view, in IAbstractItemModel model ) raises IllegalArgumentException;

	/*! 
		Retrieves views \a model instance.

		\throw co.IllegalArgumentException if the given \a view instance is not an
		instance of QAbstractItemView class.
	 */
	void getModelFromView( in Object view, out IAbstractItemModel model );

	/*!
		Installs an event handler in \a watched object and returns a cookie 
		for the installation. Once installed, the event handler will be 
		notified of all events from \a watched object. If \a watched already
	    have an installed event handler it will be replaced.
	 */
	int64 installEventHandler( in Object watched, in IEventHandler handler );

	/*!
		Grabs the mouse input. 

		The given \a widget receives all mouse events until releaseMouse() is 
		called.	Other widgets get no mouse events at all. Keyboard events are 
		not affected. sets \a cursor that will be unset on releaseMouse()
		
		\throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	 */
	void grabMouse( in Object widget, in int32 cursor );

	//! Releases the mouse grab. \see grabMouse().
	//! \throw co.IllegalArgumentException if \a widget is not an instance of class QWidget.
	void releaseMouse( in Object widget );

	/*!
		Adds a timer \a callback to be notified at frequency of 60 Hz. The
		notification interval is not granted to be 1/60, since it depends on
		the Qt's GUI's event queue, but the real user-time interval elapsed
		between two consecutive notifications is passed to ITimerCallback 
		method \a update(dt). The precision of elapsed interval \a dt depends
		on the underlying operating system.
	 */
	void addTimerCallback( in ITimerCallback callback );

	/*!
		Adds a timer \a callback to be notified at frequency of 60 Hz. The
		notification interval is not granted to be 1/60, since it depends on
		the Qt's event queue and its single threaded, but the real time 
		interval elapsed between two consecutive notifications is passed to the
		callback through ITimerCallback interface method \a update(dt).
		This time interval is measured in user time with a precision that
		depends on the underlying operating system.
	 */
	void removeTimerCallback( in ITimerCallback callback );

	/*!
		Connects a \a signal from \a sender to a \a handler, and returns the 
		connection cookie. \note To undo the connection, call disconnect() 
		passing the returned connection cookie.

		\throw co.IllegalArgumentException if the \a sender or \a handler are
		invalid.
		\throw qt.Exception if the sender does not have such signal or the 
		connection cannot be made.
	 */
	int32 connect( in Object sender, in string signal, in IConnectionHandler handler )
		raises IllegalArgumentException, Exception;

	// Removes the connection identified by the given \a cookie.
	void disconnect( in int32 cookie ) raises co.IllegalArgumentException;

	// Runs the Qt event loop until quit() is called.
	void exec();

	// Executes a single iteration of the Qt event loop.
	void processEvents();

	// Quits the Qt event loop.
	void quit();
};
