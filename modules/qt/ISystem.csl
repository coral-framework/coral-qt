import co.NotSupportedException;
import co.IllegalArgumentException;

/*
	Exposes system-wide Qt operations.
 */
interface ISystem
{
	// The 'qApp' object.
	readonly attribute Object app;

	// Loads a QWidget from a .ui file created in Qt Designer.
	// \throw qt.Exception if the ui file could not be loaded.
	void loadUi( in string filePath, out Object widget ) raises Exception;

	// Sets or replaces Qt's search paths for file names with the prefix 
	// 'prefix' to 'searchPaths'. \see Qt's documentation of QDir::setSearchPaths().
	void setSearchPaths( in string prefix, in string[] searchPaths );

	// Opens a directory selection dialog and returns the selected directory or
	// an empty string if no directory was selected.
	void getExistingDirectory( in Object parent, in string caption, in string initialDir, out string selectedDir );

	// Opens a file selection dialog and returns the selected files or an empty
	// list if no file was selected
	void getOpenFileNames( in Object parent, in string caption, in string initialDir, out string[] selectedFiles );

	/* 
		Creates a new object using the class specified by className. This 
		function supports creation of any widget class listed in 
		QUILoader::availableWidgets() method plus QActions, any QLayout 
		subclass (i.e QStackedLayout) and QMessageBox classes.

		\throw co.NotSupportedException if className is not supported.
	 */
	void newInstanceOf( in string className, in Object parent, out Object object ) 
		raises NotSupportedException;

	/* 
		Inserts a widget in the given \a parent before widget with index 
		\a beforeIndex. Parameter \a parent must be an instance of 
		QStatusBar, QBoxLayout, QStackedLayout or QSplitter. If \a beforeIndex
		is -1, then the \a widget is appended after last widget in \a parent 
		widget list.

		\throw co.IllegalArgumentException if the \a parent is not an instance
		of QStatusBar, QBoxLayout, QStackedLayout nor QSplitter class.
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
	 */
	void insertWidget( in Object parent, in int32 beforeIndex, in Object widget ) 
		raises IllegalArgumentException;

	/* 
		Removes \a widget from \a parent.
	
		\throw co.IllegalArgumentException if the \a parent is not an instance
		of QStatusBar, QBoxLayout nor QStackedLayout class.
		Note: altough it is possible to insert a widget into a QSplitter (\see,
		insertWidget()), Qt	does not allow removal of widgets from splitters,
		so an exception will be raised if a QSplitter is passed as argument to
		\a widget.

		This function also sets the parent widget of \a widget to NULL.

		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
	 */
	void removeWidget( in Object parent, in Object widget )
		raises IllegalArgumentException;

	/*! 
		Sets a layout in the given widget.
		
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
		\throw co.IllegalArgumentException if the \a layout is not an instance
		of QLayout class.
	 */
	void setLayout( in Object widget, in Object layout ) raises IllegalArgumentException;

	/*! 
		Gets the layout from the given widget.
		
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget.
	 */
	void getLayout( in Object widget, out Object layout ) raises IllegalArgumentException;

	/*! 
		Adds an action to the given widget before \a beforeAction action.
		If \a beforeActionIndex is -1 the action is appended after the last
		action in widgets list.

		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget or \a action is not an instance of QAction.
		\throw qt.Exception if the \a action or beforeActionIndex is 
		out-of-bounds.
	 */
	void insertAction( in Object widget, in int32 beforeActionIndex, in Object action ) 
		raises IllegalArgumentException, Exception;

	/*! 
		Removes \a action from \a widget.
		
		\throw co.IllegalArgumentException if the \a widget is not instance of
		QWidget or \a action is not an instance of QAction.
		\throw qt.Exception if the \a action or beforeActionIndex is 
		out-of-bounds.
	 */
	void removeAction( in Object widget, in Object action ) 
		raises IllegalArgumentException, Exception;	

	/*! Sets the given \a action as separator. \see QAction:setSeparator().

		\throw co.IllegalArgumentException if the \a action is not an instance
		of QAction class.
  	 */
	void makeSeparator( in Object action ) raises IllegalArgumentException;

	/*! Sets the a menu in the given \a action. It allows creation of submenus
		or menus in QMenuBars.

		\throw co.IllegalArgumentException if the \a action is not an instance
		of QAction class.

		\throw co.IllegalArgumentException if the \a menu is not an instance
		of QMenu class.
  	 */
	void setMenu( in Object action, in Object menu ) raises IllegalArgumentException;

	/*! 
		Performs exec() calls to QMenu instances (\see QMenu::exec()).
		The exec() call is performed at position (posX, posY). If posX or posY is
		invalid (i.e -1) the exec() call is performed at current cursor position.

		Returns the triggered action or a null object if no action was triggered.

		\throw co.IllegalArgumentException if the given menu instance is not an
		instance of QMenu class.
	 */
	void execMenu( in Object menu, in int32 posX, in int32 posY, out Object selectedAction )
		raises IllegalArgumentException;

	/* 
		Sets the given IAbstractItemModel as the model for the given view instance.

		\throw co.IllegalArgumentException if the given \a view instance is not an
		instance of QAbstractItemView class or \a model is not an instance of
		QAbstractItemModel class.
	 */
	void assignModelToView( inout Object view, in IAbstractItemModel model ) raises IllegalArgumentException;

	/*
		Connects a \a signal from \a sender to a \a handler, and returns the 
		connection cookie. \note To undo the connection, call disconnect() 
		passing the returned connection cookie.

		\throw co.IllegalArgumentException if the \a sender or \a handler are
		invalid.
		\throw qt.Exception if the sender does not have such signal or the 
		connection cannot be made.
	 */
	int32 connect( in Object sender, in string signal, in IConnectionHandler handler )
		raises IllegalArgumentException, Exception;

	// Removes the connection identified by the given \a cookie.
	void disconnect( in int32 cookie ) raises co.IllegalArgumentException;

	// Runs the Qt event loop until quit() is called.
	void exec();

	// Executes a single iteration of the Qt event loop.
	void processEvents();

	// Quits the Qt event loop.
	void quit();
};
