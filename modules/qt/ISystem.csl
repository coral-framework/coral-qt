/*
	Exposes system-wide Qt operations.
 */
interface ISystem
{
	// The 'qApp' object.
	readonly attribute Object app;

	// Creates a new widget with the given parent and name using the class specified by className.
	void createWidget( in string className, in Object parent, in string widgetName, out Object widget );

	// Loads a QWidget from a .ui file created in Qt Designer.
	void loadUi( in string filePath, out Object widget ) raises Exception;

	// Opens a directory dialog and returns the selected file.
	void getExistingDirectory( in Object parent, in string caption, in string initialDir, out string selectedDir );

	// Sets or replaces Qt's search paths for file names with the prefix 'prefix'
	// to 'searchPaths'. \see Qt's documentation of QDir::setSearchPaths().
	void setSearchPaths( in string prefix, in string[] searchPaths );

	/*
		Connects a \a signal from \a sender to a \a handler, and returns the connection cookie.
		\note To undo the connection, call disconnect() passing the returned connection cookie.
		\throw co.IllegalArgumentException if the \a sender or \a handler are invalid.
		\throw qt.Exception if the sender does not have such signal or the connection cannot be made.
	 */
	int32 connect( in Object sender, in string signal, in IConnectionHandler handler )
		raises co.IllegalArgumentException, Exception;

	// Removes the connection identified by the given \a cookie.
	void disconnect( in int32 cookie ) raises co.IllegalArgumentException;

	// Sets the given IAbstractItemModel as the model for the given view instance.
	void assignModelToView( inout Object view, in IAbstractItemModel model );

	// Runs the Qt event loop until quit() is called.
	void exec();

	// Executes a single iteration of the Qt event loop.
	void processEvents();

	// Quits the Qt event loop.
	void quit();
};
