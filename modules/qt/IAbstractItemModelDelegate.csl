/*
	Delegate for IAbstractItemModelDelegate interface and for Qt AbstractItemView
	signals.

	IAbstractItemModelDelegate behavior:

	Like Qt's AbstractItemModel class, this interface has a convention that 
	underlying data model is exposed as a hierarchy of tables. However,
	unlike Qt, the item handle is a single integer that maps a user data
	element. Each element is located relative to its parent index in a
	specific row and column. All top-level element contains an invalid 
	parent index handle of -1.

	A common convention used in models that expose tree data structures is 
	that only items in the first column have children. For that case, when 
	reimplementing getParentIndex() function the column of the returned parent
	(obtained by getColumn()) will be 0.

	Qt AbstractItemView signals:

	This delegate also works as a bridge between AbstractItemView signals and
	a coral component. For that to work it defines 5 methods called whenever
	a view that uses the the model emits a signal.
 */
interface IAbstractItemModelDelegate
{
	// This field should be set automatically when a delegate field is set on IAbstractItemModel.
	IAbstractItemModel owner;
	
	// IAbstractItemModelDelegate methods:

	// Returns the index of the item in the model specified by the given row, 
	// column and parent index. 
	int32 getIndex( in int32 row, in int32 col, in int32 parentIndex );

	// Returns the parent of the model item with the given itemIndex. If the 
	// item has no parent, an invalid index is returned (i.e -1).
	int32 getParentIndex( in int32 index );
	
	// Sets an specific data for the given role at the given index.
	// Returns true if data was successful set and false otherwise.
	bool setData( in int32 index, in any data, in int32 role );

	// Returns the data stored under the given role for the item referred to 
	// by index. If you do not have a value to return, return nil instead.
	void getData( in int32 index, in int32 role, out any data );

	// Returns the flags for the given index.
	int32 getFlags( in int32 index );

	// Returns the data for the given role and column in the horizontal header.
	void getHorizontalHeaderData( in int32 section, in int32 role, out any data );

	// Returns the data for the given role and row in the vertical header.
	void getVerticalHeaderData( in int32 section, in int32 role, out any data );

	/*
		Returns the number of columns for the children of the given parent.
		In many models, the number of columns is independent of the parent.
		An invalid parentIndex (i.e -1) represents the root item.
		\see getRowCount()
     */
	int32 getColumnCount( in int32 parentIndex );

	/*
		Returns the number of rows for the children of the given parent. 
		In many models, the number of columns is independent of the parent.
		For example, a constant number of rows or 0 in a list model.
		An invalid parentIndex (i.e -1) represents the root item. 
		\see columnCount().
     */
	int32 getRowCount( in int32 parentIndex );

	// Returns the current row of the item specified by the given indexItem.
	uint32 getRow( in int32 index );

	// Returns the current column of the item specified by the given indexItem.
	uint32 getColumn( in int32 index );
	
	// Returns an object that contains serialized items of data corresponding to the list of indexes specified. 
	void mimeData( in int32[] indexes, inout MimeData mimeData );
	
	// Returns a list of MIME types that can be used to describe a list of model indexes.
	void mimeTypes( out string[] result );
	
	// Below method is called when a drag operation ends over the given index of row, col and parent.
	// Returns true if the drop request can be handled.
	bool dropMimeData( in MimeData mimeData, in int32 action, in int32 row, in int32 column, in int32 parentIndex );
};
